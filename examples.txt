oak: input:
for i in 1 -> 100 {
	if i % 5 == 0 and i % 3 == 0:	print "fizzbuzz"
	else if i % 5 == 0:		print "fizz"
	else if i % 3 == 0:		print "buzz"
	else				print i;
}

# foobar

for var i = 1; i < 101; i++ {
	if i % 5 == 0 and i % 3 == 0:	print "fizzbuzz"
	else if i % 5 == 0:		print "fizz"
	else if i % 3 == 0:		print "buzz"
	else				print i
}

oak: now lexing...
[   KEYWORD][keyw:       for][len:    3][eol:false][value:for]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[   KEYWORD][keyw:        in][len:    2][eol:false][value:in]
[   INTEGER][data:         1][len:    1][eol:false][value:1]
[    SYMBOL][symb:        ->][len:    2][eol:false][value:->]
[   INTEGER][data:       100][len:    3][eol:false][value:100]
[    SYMBOL][symb:         {][len:    1][eol: true][value:{]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         5][len:    1][eol:false][value:5]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:       and][len:    3][eol:false][value:and]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         3][len:    1][eol:false][value:3]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   11][eol: true][value:"fizzbuzz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         5][len:    1][eol:false][value:5]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    7][eol: true][value:"fizz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         3][len:    1][eol:false][value:3]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    7][eol: true][value:"buzz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[    SYMBOL][symb:         }][len:    1][eol: true][value:}]
[   KEYWORD][keyw:       for][len:    3][eol:false][value:for]
[   KEYWORD][keyw:       var][len:    3][eol:false][value:var]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         =][len:    1][eol:false][value:=]
[   INTEGER][data:         1][len:    1][eol:false][value:1]
[    SYMBOL][symb:         ;][len:    1][eol:false][value:;]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         <][len:    1][eol:false][value:<]
[   INTEGER][data:       101][len:    3][eol:false][value:101]
[    SYMBOL][symb:         ;][len:    1][eol:false][value:;]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:        ++][len:    2][eol:false][value:++]
[    SYMBOL][symb:         {][len:    1][eol: true][value:{]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         5][len:    1][eol:false][value:5]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:       and][len:    3][eol:false][value:and]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         3][len:    1][eol:false][value:3]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   11][eol: true][value:"fizzbuzz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         5][len:    1][eol:false][value:5]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    7][eol: true][value:"fizz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[IDENTIFIER][               ][len:    1][eol:false][value:i]
[    SYMBOL][symb:         %][len:    1][eol:false][value:%]
[   INTEGER][data:         3][len:    1][eol:false][value:3]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[   INTEGER][data:         0][len:    1][eol:false][value:0]
[    SYMBOL][symb:         :][len:    1][eol:false][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    7][eol: true][value:"buzz"]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[IDENTIFIER][               ][len:    1][eol: true][value:i]
[    SYMBOL][symb:         }][len:    1][eol: true][value:}]
[       END][               ][len:    1][eol:false][value:]
oak: now parsing...
(root)
|-- (stmt for loop)
|   |-- (initializer)
|   |   `-- (stmt expression)
|   |       `-- (identifier i)
|   |-- (iterator)
|   |   `-- (binary ->)
|   |       |-- (integer 1)
|   |       `-- (integer 100)
|   `-- (body)
|       `-- (stmt block)
|           `-- (stmt if)
|               |-- (condition)
|               |   `-- (binary and)
|               |       |-- (binary ==)
|               |       |   |-- (binary %)
|               |       |   |   |-- (identifier i)
|               |       |   |   `-- (integer 5)
|               |       |   `-- (integer 0)
|               |       `-- (binary ==)
|               |           |-- (binary %)
|               |           |   |-- (identifier i)
|               |           |   `-- (integer 3)
|               |           `-- (integer 0)
|               |-- (then branch)
|               |   `-- (stmt print)
|               |       `-- (string "fizzbuzz")
|               `-- (else branch)
|                   `-- (stmt if)
|                       |-- (condition)
|                       |   `-- (binary ==)
|                       |       |-- (binary %)
|                       |       |   |-- (identifier i)
|                       |       |   `-- (integer 5)
|                       |       `-- (integer 0)
|                       |-- (then branch)
|                       |   `-- (stmt print)
|                       |       `-- (string "fizz")
|                       `-- (else branch)
|                           `-- (stmt if)
|                               |-- (condition)
|                               |   `-- (binary ==)
|                               |       |-- (binary %)
|                               |       |   |-- (identifier i)
|                               |       |   `-- (integer 3)
|                               |       `-- (integer 0)
|                               |-- (then branch)
|                               |   `-- (stmt print)
|                               |       `-- (string "buzz")
|                               `-- (else branch)
|                                   `-- (stmt print)
|                                       `-- (identifier i)
`-- (stmt for loop)
    |-- (initializer)
    |   `-- (stmt variable declaration)
    |       `-- (i)
    |           `-- (integer 1)
    |-- (condition)
    |   `-- (binary <)
    |       |-- (identifier i)
    |       `-- (integer 101)
    |-- (next)
    |   `-- (postfix ++)
    |       `-- (identifier i)
    `-- (body)
        `-- (stmt block)
            `-- (stmt if)
                |-- (condition)
                |   `-- (binary and)
                |       |-- (binary ==)
                |       |   |-- (binary %)
                |       |   |   |-- (identifier i)
                |       |   |   `-- (integer 5)
                |       |   `-- (integer 0)
                |       `-- (binary ==)
                |           |-- (binary %)
                |           |   |-- (identifier i)
                |           |   `-- (integer 3)
                |           `-- (integer 0)
                |-- (then branch)
                |   `-- (stmt print)
                |       `-- (string "fizzbuzz")
                `-- (else branch)
                    `-- (stmt if)
                        |-- (condition)
                        |   `-- (binary ==)
                        |       |-- (binary %)
                        |       |   |-- (identifier i)
                        |       |   `-- (integer 5)
                        |       `-- (integer 0)
                        |-- (then branch)
                        |   `-- (stmt print)
                        |       `-- (string "fizz")
                        `-- (else branch)
                            `-- (stmt if)
                                |-- (condition)
                                |   `-- (binary ==)
                                |       |-- (binary %)
                                |       |   |-- (identifier i)
                                |       |   `-- (integer 3)
                                |       `-- (integer 0)
                                |-- (then branch)
                                |   `-- (stmt print)
                                |       `-- (string "buzz")
                                `-- (else branch)
                                    `-- (stmt print)
                                        `-- (identifier i)
