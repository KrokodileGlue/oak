oak: input:
a = 420 * 666 + 6969 - '\xFFF n stuff \e';

"string 1" "string 2" R($)string 3$

if true {
	print "Hello, world!";
	print "other stuff";
	print "new stuff";
} else if false {
	print "Hello... world?";
	print "blah";
}

if type a == "integer":
	print "foo" + "bar";

print "foo bar baz";

oak: now lexing...
[IDENTIFIER][               ][len:    1][eol:false][value:a]
[    SYMBOL][symb:         =][len:    1][eol:false][value:=]
[   INTEGER][data:       420][len:    3][eol:false][value:420]
[    SYMBOL][symb:         *][len:    1][eol:false][value:*]
[   INTEGER][data:       666][len:    3][eol:false][value:666]
[    SYMBOL][symb:         +][len:    1][eol:false][value:+]
[   INTEGER][data:      6969][len:    4][eol:false][value:6969]
[    SYMBOL][symb:         -][len:    1][eol:false][value:-]
[   INTEGER][data:        96][len:   17][eol:false][value:'\xFFF n stuff \e']
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[    STRING][               ][len:   11][eol: true][value:"string 1""string 2"R($)string 3]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[      BOOL][               ][len:    4][eol:false][value:true]
[    SYMBOL][symb:         {][len:    1][eol: true][value:{]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   16][eol:false][value:"Hello, world!"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   14][eol:false][value:"other stuff"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   12][eol:false][value:"new stuff"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[    SYMBOL][symb:         }][len:    1][eol:false][value:}]
[   KEYWORD][keyw:      else][len:    4][eol:false][value:else]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[      BOOL][               ][len:    5][eol:false][value:false]
[    SYMBOL][symb:         {][len:    1][eol: true][value:{]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   18][eol:false][value:"Hello... world?"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    7][eol:false][value:"blah"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[    SYMBOL][symb:         }][len:    1][eol: true][value:}]
[   KEYWORD][keyw:        if][len:    2][eol:false][value:if]
[    SYMBOL][symb:      type][len:    4][eol:false][value:type]
[IDENTIFIER][               ][len:    1][eol:false][value:a]
[    SYMBOL][symb:        ==][len:    2][eol:false][value:==]
[    STRING][               ][len:   10][eol:false][value:"integer"]
[    SYMBOL][symb:         :][len:    1][eol: true][value::]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:    6][eol:false][value:"foo"]
[    SYMBOL][symb:         +][len:    1][eol:false][value:+]
[    STRING][               ][len:    6][eol:false][value:"bar"]
[    SYMBOL][symb:         ;][len:    1][eol: true][value:;]
[   KEYWORD][keyw:     print][len:    5][eol:false][value:print]
[    STRING][               ][len:   14][eol:false][value:"foo bar baz"]
[    SYMBOL][symb:         ;][len:    1][eol:false][value:;]
[       END][               ][len:    1][eol: true][value:]
test.k:1:26: warning: hexadecimal value 4095 is too large and will be masked to the lowest byte
	a = 420 * 666 + 6969 - '\xFFF n stuff \e';
	                        ^~~~~
test.k:1:40: warning: unrecognized escape sequence: '\e'
	a = 420 * 666 + 6969 - '\xFFF n stuff \e';
	                                      ^~
test.k:1:25: warning: multi-element character literal will be truncated to the first element
	a = 420 * 666 + 6969 - '\xFFF n stuff \e';
	                       ^~~~~~~~~~~~~~~~~~
oak: now parsing...
(root)
|-- (stmt expression)
|   `-- (binary =)
|       |-- (identifier a)
|       `-- (binary -)
|           |-- (binary +)
|           |   |-- (binary *)
|           |   |   |-- (integer 420)
|           |   |   `-- (integer 666)
|           |   `-- (integer 6969)
|           `-- (integer 96)
|-- (stmt expression)
|   `-- (string "string 1string 2string 3")
|-- (stmt if)
|   |-- (condition)
|   |   `-- (bool true)
|   |-- (then branch)
|   |   `-- (stmt block)
|   |       |-- (stmt print)
|   |       |   `-- (string "Hello, world!")
|   |       |-- (stmt print)
|   |       |   `-- (string "other stuff")
|   |       `-- (stmt print)
|   |           `-- (string "new stuff")
|   `-- (else branch)
|       `-- (stmt if)
|           |-- (condition)
|           |   `-- (bool false)
|           `-- (then branch)
|               `-- (stmt block)
|                   |-- (stmt print)
|                   |   `-- (string "Hello... world?")
|                   `-- (stmt print)
|                       `-- (string "blah")
|-- (stmt if)
|   |-- (condition)
|   |   `-- (binary ==)
|   |       |-- (prefix type)
|   |       |   `-- (identifier a)
|   |       `-- (string "integer")
|   `-- (then branch)
|       `-- (stmt print)
|           `-- (binary +)
|               |-- (string "foo")
|               `-- (string "bar")
`-- (stmt print)
    `-- (string "foo bar baz")
